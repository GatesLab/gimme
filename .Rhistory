)
est
R2conv <- matrix(NA, nrow = 1, ncol = length(varLabels$conv))
colnames(est) <- varLabels$conv
colnames(R2conv) <- varLabels$conv
cv
stimuli   <- df[,cv, drop = TRUE]
stimuli
if(any(is.na(stimuli))){
stop(
"gimme ERROR: missing values in the binary impulse vector not allowed"
)
}
convolved <- sFIR(data = conv_use, stimuli = stimuli, response_length = conv_length, interval = conv_interval)
View(gimme::HRFsim[[1]])
run2 <- gimme(data = gimme::HRFsim,
ar = TRUE,
exogenous = "V5",
conv_vars = "V5",
conv_length = 16,
conv_interval = 1,
mult_vars = "V4*V5",
mean_center_mult = TRUE
)
View(search.paths)
library(gimme)
run2 <- gimme(data = gimme::HRFsim,
ar = TRUE,
exogenous = "V5",
conv_vars = "V5",
conv_length = 16,
conv_interval = 1,
mult_vars = "V4*V5",
mean_center_mult = TRUE
)
run2 <- gimme(data = gimme::HRFsim,
ar = TRUE,
exogenous = "V5",
conv_vars = "V5",
conv_length = 16,
conv_interval = 1,
mult_vars = "V4*V5",
mean_center_mult = TRUE
)
length(convolved$R2)
convolved$R2
is.list(R2conv)
head(R2conv)
R2conv
length(est[,cv] )
run2 <- gimme(data = gimme::HRFsim,
ar = TRUE,
exogenous = "V5",
conv_vars = "V5",
conv_length = 16,
conv_interval = 1,
mult_vars = "V4*V5",
mean_center_mult = TRUE
)
run2 <- gimme(data = gimme::HRFsim,
ar = TRUE,
exogenous = "V5",
conv_vars = "V5",
conv_length = 16,
conv_interval = 1,
mult_vars = "V4*V5",
mean_center_mult = TRUE
)
convolved$R2
R2[best]
run_length <- length(stimuli)
t = seq(from = 1, to = response_length, by =interval)
X_fir <- matrix(0, run_length, (response_length/interval))
run_length <- length(stimuli)
t = seq(from = 1, to = response_length, by =interval)
response_length = 16
interval = 1
t = seq(from = 1, to = response_length, by =interval)
X_fir <- matrix(0, run_length, (response_length/interval))
c_onsets <- which(stimuli == 1)
if(is.null(c_onsets)){
est_rf = NULL
conv_stim_onsets = NULL
R2 = NULL
}
id_cols <- seq(from=1, to = response_length/interval)
for (j in 1: length(c_onsets)){
id_rows <- seq(from =c_onsets[j], to= (c_onsets[j]+response_length/interval-1))
for (k in 1:min(length(id_rows),(length(X_fir[,1])-c_onsets[j]))){
if(k==0) k <-1
X_fir[id_rows[k], id_cols[k]]<- 1
}
}
id_cols
for (j in 1: length(c_onsets)){
id_rows <- seq(from =c_onsets[j], to= (c_onsets[j]+response_length/interval-1))
for (k in 1:min(length(id_rows),(length(X_fir[,1])-c_onsets[j]))){
if(k==0) k <-1
X_fir[id_rows[k], id_cols[k]]<- 1
}
}
c_onsets[j]
j
c_onsets[j]
(c_onsets[j]+response_length/interval-1)
seq(from =c_onsets[j], to= (c_onsets[j]+response_length/interval-1))
for (k in 1:min(length(id_rows),(length(X_fir[,1])-c_onsets[j]))){
if(k==0) k <-1
X_fir[id_rows[k], id_cols[k]]<- 1
}
id_rows <- seq(from =c_onsets[j], to= (c_onsets[j]+response_length/interval-1))
for (k in 1:min(length(id_rows),(length(X_fir[,1])-c_onsets[j]))){
if(k==0) k <-1
X_fir[id_rows[k], id_cols[k]]<- 1
}
if (dim(as.matrix(data))[2]> 1){
R2 <- matrix(,length(data[1,]), 1)
for (p in 1:length(data[1,]))
R2[p]<- summary(lm(data[,p]~X_fir))$r.squared
R2 <- R2[-which(R2 == max(R2))] # delete max
## comment kmg 9.07.23: why? ^
best <- which(R2 == max(R2)) # take second best
} else {
R2 <- summary(lm(data~X_fir))$r.squared
best <- 1
}
C <- seq(1:length(t))%*%matrix(1, 1, length(t))
h <- sqrt(1/(7/interval))
C2 <- apply((C-t(C)), c(1,2), function(i) i^2)
RI <- solve(.1*exp(-h/2*(C2)))
# MRI <- matrix(0,1, n_cond*length(t)+1)
MRI <- matrix(0,length(t),length(t))
MRI[1:length(t),1:length(t)] = RI
if (dim(as.matrix(data))[2]> 1){
est_hrf <- solve(t(X_fir)%*%X_fir + 1^2*MRI)%*%t(X_fir)%*%data[,best]
} else
est_hrf <- solve(t(X_fir)%*%X_fir + 1^2*MRI)%*%t(X_fir)%*%data
#plot(ts(est_hrf))
conv_onsets <- stats::convolve(as.numeric(stimuli), rev(est_hrf), type = c("open"))
(dim(as.matrix(data))[2]> 1)
est_hrf <- solve(t(X_fir)%*%X_fir + 1^2*MRI)%*%t(X_fir)%*%data
X_fir
1^2*MRI
t(X_fir)
X_fir <- matrix(0, run_length, (response_length/interval))
# set up basis vectors
c_onsets <- which(stimuli == 1)
if(is.null(c_onsets)){
est_rf = NULL
conv_stim_onsets = NULL
R2 = NULL
}
id_cols <- seq(from=1, to = response_length/interval)
for (j in 1: length(c_onsets)){
id_rows <- seq(from =c_onsets[j], to= (c_onsets[j]+response_length/interval-1))
for (k in 1:min(length(id_rows),(length(X_fir[,1])-c_onsets[j]))){
if(k==0) k <-1
X_fir[id_rows[k], id_cols[k]]<- 1
}
}
X_fir
id_rows
length(c_onsets)
c_onsets[j]
min(length(id_rows)
)
c_onsets <- which(stimuli == 1)
if(is.null(c_onsets)){
est_rf = NULL
conv_stim_onsets = NULL
R2 = NULL
}
c_onsets
length(c_onsets)
id_rows <- seq(from =c_onsets[j], to= (c_onsets[j]+response_length/interval-1))
j
id_rows <- seq(from =c_onsets[j], to= (c_onsets[j]+response_length/interval-1))
id_rows
for (k in 1:min(length(id_rows),(length(X_fir[,1])-c_onsets[j]))){
if(k==0) k <-1
X_fir[id_rows[k], id_cols[k]]<- 1
}
X_fir
min(length(id_rows),(length(X_fir[,1])-c_onsets[j]))
for (k in 1:min(length(id_rows),(length(X_fir[,1])-c_onsets[j]))){
if(k==0) k <-1
X_fir[id_rows[k], id_cols[k]]<- 1
}
k
X_fir[id_rows[k], id_cols[k]]<- 1
X_fir
for (k in 1:min(length(id_rows),(length(X_fir[,1])-c_onsets[j]))){
if(k==0) k <-1
X_fir[id_rows[k], id_cols[k]]<- 1
}
if(k==0) k <-1
X_fir[id_rows[k], id_cols[k]]<- 1
k
for (k in 1:min(length(id_rows),(length(X_fir[,1])-c_onsets[j]))){
if(k==0) k <-1
X_fir[id_rows[k], id_cols[k]]<- 1
}
for (k in 1:min(length(id_rows),(length(X_fir[,1])-c_onsets[j]))){
if(k==0) k <-1
X_fir[id_rows[k], id_cols[k]]<- 1
}
for (k in 1:min(length(id_rows),(length(X_fir[,1])-c_onsets[j]))){
if(k==0) k <-1
X_fir[id_rows[k], id_cols[k]]<- 1
}
for (k in 1:min(length(id_rows),(length(X_fir[,1])-c_onsets[j]))){
if(k==0) k <-1
X_fir[id_rows[k], id_cols[k]]<- 1
}
for (k in 1:min(length(id_rows),(length(X_fir[,1])-c_onsets[j]))){
if(k==0) k <-1
X_fir[id_rows[k], id_cols[k]]<- 1
}
for (k in 1:min(length(id_rows),(length(X_fir[,1])-c_onsets[j]))){
if(k==0) k <-1
X_fir[id_rows[k], id_cols[k]]<- 1
}
for (k in 1:min(length(id_rows),(length(X_fir[,1])-c_onsets[j]))){
if(k==0) k <-1
X_fir[id_rows[k], id_cols[k]]<- 1
}
k
for (k in 1:min(length(id_rows),(length(X_fir[,1])-c_onsets[j]))){
# if(k==0) k <-1
X_fir[id_rows[k], id_cols[k]]<- 1
}
X_fir
k
X_fir[id_rows[k], id_cols[k]]<- 1
q
run2 <- gimme(data = gimme::HRFsim,
ar = TRUE,
exogenous = "V5",
conv_vars = "V5",
conv_length = 16,
conv_interval = 1,
mult_vars = "V4*V5",
mean_center_mult = TRUE
)
run2 <- gimme(data = gimme::HRFsim,
ar = TRUE,
exogenous = "V5",
conv_vars = "V5",
conv_length = 16,
conv_interval = 1,
mult_vars = "V4*V5",
mean_center_mult = TRUE
)
convolved$R2
run2 <- gimme(data = gimme::HRFsim,
ar = TRUE,
exogenous = "V5",
conv_vars = "V5",
conv_length = 16,
conv_interval = 1,
mult_vars = "V4*V5",
mean_center_mult = TRUE
)
run2 <- gimme(data = gimme::HRFsim,
ar = TRUE,
exogenous = "V5",
conv_vars = "V5",
conv_length = 16,
conv_interval = 1,
mult_vars = "V4*V5",
mean_center_mult = TRUE
)
convolved$R2
source("~/Dropbox/GitHub/gimme/R/sFIR.R")
run2 <- gimme(data = gimme::HRFsim,
ar = TRUE,
exogenous = "V5",
conv_vars = "V5",
conv_length = 16,
conv_interval = 1,
mult_vars = "V4*V5",
mean_center_mult = TRUE
)
test_that("Run 2 gives expected results", {
run2_sot <- readRDS("rds/run2_path_matrix.rds")
run2_paths_sot <-readRDS("rds/run2_path_counts.rds")
run2 <- gimme(data = gimme::HRFsim,
ar = TRUE,
exogenous = "V5",
conv_vars = "V5",
conv_length = 16,
conv_interval = 1,
mult_vars = "V4*V5",
mean_center_mult = TRUE
)
expect_equal(run2[["path_est_mats"]], run2_sot, tolerance = 1e-5)
expect_identical(run2[["path_counts"]], run2_paths_sot)
})
run2 <- gimme(data = gimme::HRFsim,
ar = TRUE,
exogenous = "V5",
conv_vars = "V5",
conv_length = 16,
conv_interval = 1,
mult_vars = "V4*V5",
mean_center_mult = TRUE
)
View(run2$fit)
View(outSubgroupWrightExog$fit)
outSubgroupWrightExog<- gimme(WrightData_fewerVar90,
subgroup = TRUE,
standardize = TRUE,
exogenous = "Time")
View(outSubgroupWrightExog$fit)
View(outSubgroupWrightExog$path_se_est)
outSubgroupWrightExog<- gimme(WrightData_fewerVar90,
subgroup = TRUE,
standardize = TRUE,
exogenous = "Time")
if(!dat$hybrid){
elig_paths   = dat$candidate_paths
} else{
elig_paths   = c(dat$candidate_paths, dat$candidate_corr)
}
if(!dat$hybrid){
elig_paths   = dat$candidate_paths
} else{
elig_paths   = c(dat$candidate_paths, dat$candidate_corr)
}
dat$candidate_paths
!dat$hybrid
elig_paths   = dat$candidate_paths
status   <- list()
fits     <- list()
coefs    <- list()
betas    <- list()
vcov     <- list()
vcovfull <- list()
plots    <- list()
syntax   <- list()
psi      <- list()
psiunstd <- list()
plots_cov <- list()
n_ind    <- ifelse(dat$agg, 1, dat$n_subj)
if (dat$agg){
data_all <- do.call(rbind, dat$ts_list)
colnames(data_all) <- dat$varnames
}
k <- 34
if (dat$agg){
data_list <- data_all
} else {
data_list <- dat$ts_list[[k]]
}
(dat$agg)
data_list <- dat$ts_list[[k]]
writeLines(paste0("individual-level search, subject ", k, " (", names(dat$ts_list)[k],")"))
ind_spec <- search.paths(base_syntax  = dat$syntax,
fixed_syntax = c(grp$group_paths,
ind$sub_paths[[k]]),
add_syntax   = character(),
n_paths      = 0,
data_list    = data_list,
elig_paths   = elig_paths,
prop_cutoff  = NULL,
n_subj       = 1,
chisq_cutoff = qchisq(.99, 1)
)
temp_ind_spec <- ind_spec
ind_spec <- prune.paths(base_syntax  = dat$syntax,
fixed_syntax = c(grp$group_paths,
ind$sub_paths[[k]]),
add_syntax   = ind_spec[[1]][[1]]$add_syntax,
data_list    = data_list,
n_paths      = ind_spec[[1]][[1]]$n_paths,
n_subj       = 1,
prop_cutoff  = NULL,
elig_paths   = ind_spec[[1]][[1]]$add_syntax)
!identical(temp_ind_spec[[1]][[1]]$add_syntax, ind_spec$add_syntax
)
temp_ind_spec[[1]][[1]]$add_syntax
ind_spec$add_syntax
(!identical(temp_ind_spec[[1]][[1]]$add_syntax, ind_spec$add_syntax))
ind$ind_paths[[k]] <- ind_spec$add_syntax
ind$n_ind_paths[k] <- ind_spec$n_paths
op  = NULL # appease CRAN check
ind_plot = NA
ind_plot_psi = NA
!dat$agg
fit <- fit.model(syntax    = c(dat$syntax,
grp$group_paths,
ind$sub_paths[[k]],
ind$ind_paths[[k]]),
data_file = dat$ts_list[[k]])
error   <- inherits(fit, "try-error")
error
if (!error & !any(abs(parameterTable(fit)$est)>1)) {
converge <- lavInspect(fit, "converged")
zero_se  <- sum(lavInspect(fit, "se")$beta, na.rm = TRUE) == 0
} else {
converge <- FALSE
zero_se  <- TRUE
}
!error
!any(abs(parameterTable(fit)$est)>1)
converge <- FALSE
zero_se  <- TRUE
if (converge & !zero_se & !any(abs(parameterTable(fit)$est)>1))#& (ind$n_ind_paths[k] >0) ){
status   <- "converged normally"
status
status <- "nonconvergence"
(!converge | zero_se | any(abs(parameterTable(fit)$est)>1))
(length(ind$ind_paths[[k]]!= 0))
(length(ind$ind_paths[[k]]!= 0))
(length(ind$ind_paths[[k]])!= 0)
ind$ind_paths[[k]] <- ind$ind_paths[[k]][-length(ind$ind_paths[[k]])]
ind$ind_paths[[k]]
(!dat$agg)
fit <- fit.model(syntax    = c(dat$syntax,
grp$group_paths,
ind$sub_paths[[k]],
ind$ind_paths[[k]]),
data_file = dat$ts_list[[k]])
error   <- inherits(fit, "try-error")
error
(!error & !any(abs(parameterTable(fit)$est)))
!any(abs(parameterTable(fit)$est))
abs(parameterTable(fit)$est)
any(abs(parameterTable(fit)$est))
!any(abs(parameterTable(fit)$est)>1))
(!error & !any(abs(parameterTable(fit)$est)>1))
!any(abs(parameterTable(fit)$est)>1)
converge  <- lavInspect(fit, "converged")
ind_coefs_unst0 <- parameterEstimates(fit)
ind_coefs_unst_idx <- paste0(ind_coefs_unst0$lhs,ind_coefs_unst0$op,ind_coefs_unst0$rhs)
ind_coefs_unst <- ind_coefs_unst0[ind_coefs_unst0$op == "~" |
ind_coefs_unst_idx %in% c(dat$candidate_paths, dat$candidate_corr),]
ind_coefs0 <- standardizedSolution(fit)
ind_coefs_idx <- paste0(ind_coefs0$lhs,ind_coefs0$op,ind_coefs0$rhs)
ind_coefs <- ind_coefs0[ind_coefs0$op == "~" |
ind_coefs_idx %in% c(dat$candidate_paths, dat$candidate_corr),]
#ind_coefs <- ind_coefs0[ind_coefs_idx %i
(length(ind_coefs[,1]) > 0)
length(ind_coefs[,1])
ind_coefs[,1]
ind_coefs
sum(lavInspect(fit, "se")$beta, na.rm = TRUE) == 0
zero_se
sum(lavInspect(fit, "se")$beta, na.rm = TRUE) == 0
zero_se   <- sum(lavInspect(fit, "se")$beta, na.rm = TRUE) == 0
zero_se
(converge & !any(abs(parameterTable(fit)$est)>1))
converge
!any(abs(parameterTable(fit)$est)>1))
!any(abs(parameterTable(fit)$est)>1)
any(abs(parameterTable(fit)$est)>1)
abs(parameterTable(fit)$est)
status <- "last known convergence"
any(abs(parameterTable(fit)$est)>1)
ind_fit    <- fitMeasures(fit, c("chisq", "df", "npar", "pvalue", "rmsea",
"srmr", "nnfi", "cfi", "bic", "aic", "logl"))
ind_fit    <- round(ind_fit, digits = 4)
ind_fit[2] <- round(ind_fit[2], digits = 0)
r2         <- inspect(fit, "rsquare")
r2         <- r2[dat$varLabels$endo]
r2
ind_fit    <- c(ind_fit, round(r2, digits = 4))
ind_vcov_full <- lavInspect(fit, "vcov.std.all")
keep          <- rownames(ind_vcov_full) %in% dat$candidate_paths
ind_vcov      <- ind_vcov_full[keep, keep]
outSubgroupWrightExog<- gimme(WrightData_fewerVar90,
subgroup = TRUE,
standardize = TRUE,
exogenous = "Time")
outSubgroupWrightExog<- gimme(WrightData_fewerVar90,
subgroup = TRUE,
standardize = TRUE,
exogenous = "Time")
View(outSubgroupWrightExog$fit)
WrightData_LF <-read.csv("/Users/gateskm/Library/CloudStorage/GoogleDrive-katie.gates@gmail.com/My Drive/gimme workshop materials/Data/Wright/Daily Diary Long Form reduce.csv",
header = TRUE)
WrightData<-split(WrightData_LF,WrightData_LF$ID)
WrightData_fewer <- WrightData
for (i in 1:length(WrightData_fewer))
WrightData_fewer[[i]] <- WrightData_fewer[[i]] %>%
select(Time, PA, NA., Urgency, SevereSUM, HostileDay)
knitr::opts_chunk$set(echo = TRUE)
require(dplyr)
require(gimme)
require(perturbR)
WrightData_LF <-read.csv("/Users/gateskm/Library/CloudStorage/GoogleDrive-katie.gates@gmail.com/My Drive/gimme workshop materials/Data/Wright/Daily Diary Long Form reduce.csv",
header = TRUE)
WrightData<-split(WrightData_LF,WrightData_LF$ID)
WrightData_fewer <- WrightData
for (i in 1:length(WrightData_fewer))
WrightData_fewer[[i]] <- WrightData_fewer[[i]] %>%
select(Time, PA, NA., Urgency, SevereSUM, HostileDay)
### Check for low variance
N = 112 #Wright data
noVar = matrix(NA, N, 1)
for(i in 1:112)
noVar[i] <- any(apply(WrightData_fewer[[i]], 2, stats::var, na.rm = TRUE) ==0)
# Wright data with fewer variables and variance check
WrightData_fewerVar <- WrightData_fewer[which(noVar==FALSE)]
# Wright data with fewer variables and variance check and T>=90
WrightData_fewerVar90 <-WrightData_fewerVar[lapply(1:length(WrightData_fewerVar), function(x)
length(complete.cases(WrightData_fewerVar[[x]])))>90]
outSubgroupWrightExog<- gimme(WrightData_fewerVar90,
subgroup = TRUE,
standardize = TRUE,
exogenous = "Time")
View(outSubgroupWrightExog$fit)
